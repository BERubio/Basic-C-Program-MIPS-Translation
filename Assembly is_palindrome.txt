   .data
str1:
   .asciiz "abba"
str2:
   .asciiz "racecar"
str3:
   .asciiz "swap paws",
str4:
   .asciiz "not a palindrome"
str5:
   .asciiz "another non palindrome"
str6:
   .asciiz "almost but tsomla"

# array of char pointers = {&str1, &str2, ..., &str6}
ptr_arr:
   .word str1, str2, str3, str4, str5, str6, 0

yes_str:
   .asciiz " --> Y\n"
no_str:
   .asciiz " --> N\n"

   .text

# main(): ##################################################
#   char ** j = ptr_arr
#   while (*j != 0):
#     rval = is_palindrome(*j)
#     printf("%s --> %c\n", *j, rval ? yes_str: no_str)
#     j++
#
main:
   li   $sp, 0x7ffffffc    # initialize $sp

   # PROLOGUE
   subu $sp, $sp, 8        # expand stack by 8 bytes
   sw   $ra, 8($sp)        # push $ra (ret addr, 4 bytes)
   sw   $fp, 4($sp)        # push $fp (4 bytes)
   addu $fp, $sp, 8        # set $fp to saved $ra

   subu $sp, $sp, 8        # save s0, s1 on stack before using them
   sw   $s0, 8($sp)        # push $s0
   sw   $s1, 4($sp)        # push $s1

   la   $s0, ptr_arr        # use s0 for j. init ptr_arr
main_while:
   lw   $s1, ($s0)         # use s1 for *j
   beqz $s1, main_end      # while (*j != 0):
   move $a0, $s1           #    print_str(*j)
   li   $v0, 4
   syscall
   move $a0, $s1           #    v0 = is_palindrome(*j)
   jal  is_palindrome
   beqz $v0, main_print_no #    if v0 != 0:
   la   $a0, yes_str       #       print_str(yes_str)
   b    main_print_resp
main_print_no:             #    else:
   la   $a0, no_str        #       print_str(no_str)
main_print_resp:
   li   $v0, 4
   syscall

   addu $s0, $s0, 4       #     j++
   b    main_while        # end while
main_end:

   # EPILOGUE
   move $sp, $fp           # restore $sp
   lw   $ra, ($fp)         # restore saved $ra
   lw   $fp, -4($sp)       # restore saved $fp
   j    $ra                # return to kernel
# end main ################################################

#**********
#Name:	Brandon Rubio
#UID:	 117085785
#Directory ID: brubio
#*********



is_palindrome:
	#PROLOGUE
	subu $sp, $sp, 8
	sw $ra, 8($sp)
	sw $fp, 4($sp)
	addu $fp, $sp, 8


	subu $sp, $sp, 4
	sw $a0, 4($sp)

	jal strlen

	move $t0, $v0   #place string length in t0

	lw $a0, 4($sp)  #load argument into t0
	lw $t1, -8($fp)   #save argument valuein  t1

	li $t2, 1  #set i =  1
	li $v0, 1  #set return value

	div $t3, $t0, 2  # len / 2

	addi $t3, $t3, 1  #add one to len to cover when the the len is even


for:
	bge $t2, $t3, ret  #check if i is less than len/2...If not goto ret

	lb $t4, 0($a0)    #load next character
	
	sub $t5, $t0, $t2  # len - i

	add $t6, $t5, $t1  # len -i -1 equivalent, adds from current index to index on opposite end of the string

	lb $t7, 0($t6)  #load character on the opposite side of the string

	bne $t4, $t7, ret0  # if the chars are equal, iterate for loop. Otherwise, return zero

	addi $a0, $a0, 1  #move forward in string by one index
	addi $t2, $t2, 1  #i++

	j       for

ret0:
	li $v0, 0

	j ret
	
ret:	
	#EPILOGUE
	move $sp, $fp
	lw   $ra, ($fp)
	lw   $fp, -4($fp)
	jr $ra


#############	
# strlen(str)
#############
strlen:
	# PROLOGUE
	subu $sp, $sp, 8
	sw $ra, 8($sp)
	sw $fp, 4($sp)
	addu $fp, $sp, 8

	# BODY
	li $t0, 0
	# initialize count to zero

loop:

	lbu $t1, 0($a0) # load next character
	beqz $t1, finish # check for null-byte at end of string

	addi $a0, $a0, 1 # move forward in the string by incrementing pointer
	addi $t0, $t0, 1 # add to the count

	j loop
	# restart the loop process

finish:
	move $v0, $t0 #make sure to move count into v0 for main to use!
	# EPILOGUE
	move $sp, $fp
	lw   $ra, ($fp)
	lw   $fp, -4($fp)
	jr $ra


	
